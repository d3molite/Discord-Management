@using DiscordApi.Validations
@using FluentValidation.Results
@using DiscordApi.Models
@using DiscordApi.UI.Components.BasicItems
@inherits StateComponentBase

<div class="margin flex flex-expand flex-col">
    <div class="config-heading border-bottom">
        Logging Config
    </div>
    <div class="flex flex-expand flex-col">
        <BooleanToggle Title="Enable Log" Value="@LoggingEnabled" ValueChanged="val => LoggingEnabled = val"/>
        <BooleanToggle Title="Log Deleted Messages" Value="@LogMessageDeleted" ValueChanged="val => LogMessageDeleted = val"/>
        <BooleanToggle Title="Log User Joined" Value="@LogUserJoined" ValueChanged="val => LogUserJoined = val"/>
        <BooleanToggle Title="Log User Left" Value="@LogUserLeft" ValueChanged="val => LogUserLeft = val"/>
        <BooleanToggle Title="Log User Banned" Value="@LogUserBanned" ValueChanged="val => LogUserBanned = val"/>
        <TextInput Failure="@IsLoggingChannelValid" Title="Channel ID" Value="@LoggingChannelId.ToString()" ValueChanged="val => SetLoggingChannelId(val)"/>
    </div>
</div>

@code {

    LoggingConfigValidator _validator = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Validate();
    }

    private void Validate()
    {
        InvokeAsync(() =>
        {
            ValidationResult = _validator.Validate(State.ConfigItem.RelatedLogger!);
            IsLoggingChannelValid = ValidationResult.Errors
                .SingleOrDefault(x => x.PropertyName == nameof(LoggingConfig.LoggingChannelID));
            StateHasChanged();
        });
    }

    private bool LoggingEnabled
    {
        get => State.ConfigItem.RelatedLogger!.EnableLogging;
        set
        {
            State.ConfigItem.RelatedLogger!.EnableLogging = value;
            Change();
        }
    }

    private bool LogMessageDeleted
    {
        get => State.ConfigItem.RelatedLogger!.LogMessageDeleted;
        set
        {
            State.ConfigItem.RelatedLogger!.LogMessageDeleted = value;
            Change();
        }
    }

    private bool LogUserJoined
    {
        get => State.ConfigItem.RelatedLogger!.LogUserJoined;
        set
        {
            State.ConfigItem.RelatedLogger!.LogUserJoined = value;
            Change();
        }
    }

    private bool LogUserLeft
    {
        get => State.ConfigItem.RelatedLogger!.LogUserLeft;
        set
        {
            State.ConfigItem.RelatedLogger!.LogUserLeft = value;
            Change();
        }
    }

    private bool LogUserBanned
    {
        get => State.ConfigItem.RelatedLogger!.LogUserBanned;
        set
        {
            State.ConfigItem.RelatedLogger!.LogUserBanned = value;
            Change();
        }
    }

    private ulong LoggingChannelId
    {
        get => State.ConfigItem.RelatedLogger!.LoggingChannelID;
        set
        {
            State.ConfigItem.RelatedLogger!.LoggingChannelID = value;
            Change();
        }
    }

    private ValidationFailure? IsLoggingChannelValid { get; set; }

    private void SetLoggingChannelId(string id)
    {
        LoggingChannelId = ulong.Parse(id);
    }

    private void Change()
    {
        InvokeAsync(() =>
        {
            Validate();
            StateHasChanged();

            if ((bool)ValidationResult?.IsValid)
            {
                State.TriggerSave();
            }
        });
    }

}