@using DiscordApi.Validations
@using FluentValidation.Results
@using DiscordApi.Models
@using DiscordApi.UI.Components.BasicItems
@inherits StateComponentBase

<div class="margin flex flex-expand flex-col">
    <div class="config-heading border-bottom">
        Reaction Role Config
    </div>
    <div class="flex flex-expand flex-row">
        <div class="flex flex-col config-column">
            <div class="flex flex-expand flex-col border">
                @foreach (var cfg in Configs)
                {
                    @if (SelectedRoleConfig == cfg.ID)
                    {
                        <div class="optionListItem ui">
                            @ConfigName(cfg)
                        </div>
                    }
                    else
                    {
                        <div class="optionListItem" @onclick="() => SelectedRoleConfig = cfg.ID">
                            @ConfigName(cfg)
                        </div>
                    }
                }
            </div>
            <div class="flex button-wrapper flex-center">
                <div class="button flex flex-center flex-expand margin-top" @onclick="AddNew">Add New</div>
            </div>
        </div>
        <div class="flex flex-col flex-expand">
            <Dropdown TItem="Message"
                      Title="Related Message"
                      SelectedItem="@RelatedMessage"
                      ItemsSource="@AvailableMessages"
                      Failure="@IsRelatedMessageValid"
                      SelectedItemChanged="SetRelatedMessage"/>
            <Dropdown TItem="Emoji"
                      Title="Related Emoji"
                      SelectedItem="@RelatedEmoji"
                      ItemsSource="@AvailableEmoji"
                      Failure="@IsRelatedEmojiValid"
                      SelectedItemChanged="SetRelatedEmoji"/>
            <Dropdown TItem="Role"
                      Title="Related Role"
                      SelectedItem="@RelatedRole"
                      ItemsSource="@AvailableRoles"
                      Failure="@IsRelatedRoleValid"
                      SelectedItemChanged="SetRelatedRole"/>
            <ConfigButton Title="Trash" Clicked="Delete"/>
        </div>
    </div>

</div>

@code {

    ReactionRoleValidator _validator = new();

    private List<ReactionRoleConfig> Configs { get; set; } = new();
    private List<Message> AvailableMessages { get; set; } = new();
    private List<Emoji> AvailableEmoji { get; set; } = new();
    private List<Role> AvailableRoles { get; set; } = new();

    private int SelectedRoleConfig { get; set; }

    private ReactionRoleConfig? Selected => State.ConfigItem.RoleConfigs.SingleOrDefault(x => x.ID == SelectedRoleConfig);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Configs = State.ConfigItem.RoleConfigs
            .Where(x => x.RelatedGuild.Name == State.SelectedGuild)
            .ToList();

        if (Configs.Any())
        {
            SelectedRoleConfig = Configs.First().ID;
        }

        AvailableMessages = State.Db.Messages.Where(x => x.RelatedGuild.Name == State.SelectedGuild).ToList();
        AvailableEmoji = State.Db.Emojis.ToList();
        AvailableRoles = State.Db.Roles.Where(x => x.RelatedGuild.Name == State.SelectedGuild).ToList();
    }

    private string ConfigName(ReactionRoleConfig config)
    {
        return $"{config.RelatedEmoji?.EmojiString} - {config.RelatedRole?.Name}";
    }

    private Message? RelatedMessage
    {
        get => Selected?.RelatedMessage;
        set
        {
            if (Selected != null) Selected.RelatedMessage = value;
            Change();
        }
    }

    private ValidationFailure? IsRelatedMessageValid { get; set; }

    private void SetRelatedMessage(object? ob)
    {
        RelatedMessage = ob switch
        {
            Message message => message,
            null => null,
            _ => RelatedMessage
            };
    }

    private Emoji? RelatedEmoji
    {
        get => Selected?.RelatedEmoji;
        set
        {
            if (Selected != null) Selected.RelatedEmoji = value;
            Change();
        }
    }

    private ValidationFailure? IsRelatedEmojiValid { get; set; }

    private void SetRelatedEmoji(object? ob)
    {
        RelatedEmoji = ob switch
        {
            Emoji emoji => emoji,
            null => null,
            _ => RelatedEmoji
            };
    }

    private Role? RelatedRole
    {
        get => Selected?.RelatedRole;
        set
        {
            if (Selected != null) Selected.RelatedRole = value;
            Change();
        }
    }

    private ValidationFailure? IsRelatedRoleValid { get; set; }

    private void SetRelatedRole(object? ob)
    {
        RelatedRole = ob switch
        {
            Role role => role,
            null => null,
            _ => RelatedRole
            };
    }

    private void Change()
    {
        InvokeAsync(() =>
        {
            Validate();
            StateHasChanged();

            if ((bool)ValidationResult?.IsValid)
            {
                State.TriggerSave();
                SelectedRoleConfig = Configs
                    .Single(x => x.RelatedEmoji == Selected.RelatedEmoji && x.RelatedMessage == Selected.RelatedMessage).ID;
            }
        });
    }

    private void Validate()
    {
        InvokeAsync(() =>
        {
            if (Selected != null)
            {
                ValidationResult = _validator.Validate(Selected);
                IsRelatedMessageValid = ValidationResult.Errors
                    .SingleOrDefault(x => x.PropertyName == nameof(ReactionRoleConfig.RelatedMessage));
                IsRelatedEmojiValid = ValidationResult.Errors
                    .SingleOrDefault(x => x.PropertyName == nameof(ReactionRoleConfig.RelatedEmoji));
                IsRelatedRoleValid = ValidationResult.Errors
                    .SingleOrDefault(x => x.PropertyName == nameof(ReactionRoleConfig.RelatedRole));
            }

            StateHasChanged();
        });
    }

    private void AddNew()
    {
        var n = new ReactionRoleConfig
        {
            RelatedGuild = State.GuildItem
        };

        State.Db.Add(n);
        State.ConfigItem.RoleConfigs.Add(n);
        Configs.Add(n);
        SelectedRoleConfig = n.ID;
        Change();
    }

    private void Delete()
    {
        State.Db.Remove(Selected!);
        Configs.Remove(Selected!);
        State.ConfigItem.RoleConfigs.Remove(Selected!);
        try
        {
            SelectedRoleConfig = Configs
                .OrderByDescending(x => x.ID)
                .First(x => x.ID < SelectedRoleConfig).ID;
        }
        catch (Exception e)
        {
            SelectedRoleConfig = Configs.First().ID;
        }

        Change();
    }

}