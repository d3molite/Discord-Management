@page "/config"
@using Microsoft.EntityFrameworkCore
@using DiscordApi.Models
@using DiscordApi.UI.Components.Configs
@using DiscordApi.Data
@inherits DiscordApi.UI.Components.StateComponentBase

<div class="flex flex-expand settings-main">
    <div class="flex flex-row flex-expand settings-cols">
        <div class="flex flex-col settings-types">
            <div class="settings-header border-bottom"></div>
            @foreach (var cfg in BotConfig.Configs)
            {
                @if (State.SelectedConfig == cfg.Key)
                {
                    <div class="settings-item ui">
                        @cfg.Key
                    </div>
                }
                else
                {
                    <div class="settings-item" @onclick="() => SelectConfig(cfg.Key)">
                        @cfg.Key
                    </div>
                }
            }
            <div class="flex flex-expand border-right"></div>
        </div>
        <div class="flex flex-col flex-expand settings-box">
            <div class="flex flex-row settings-header">
                @foreach (var config in BotConfigs)
                {
                    @if (State.SelectedGuild == config.RelatedGuild.Name)
                    {
                        <div class="settings-g settings-guild-selected">
                            @config.RelatedGuild.Name
                        </div>
                    }
                    else
                    {
                        <div class="settings-g settings-guild" @onclick="() => SelectGuild(config)">
                            @config.RelatedGuild.Name
                        </div>
                    }
                }
                <div class="settings-guild">+</div>
            </div>
            <div class="flex flex-expand flex-col settings-main-window">
                @switch (State.SelectedConfig)
                {
                    case "Basic":
                        <Basic></Basic>
                        break;
                    case "Logging":
                        @if (State.ConfigItem.RelatedLogger is not null)
                        {
                            <Logging></Logging>
                        }
                        break;
                    case "Reaction Roles":
                        <ReactionRoles></ReactionRoles>
                        break;
                }
            </div>
        </div>

    </div>
    <div class="flex flex-col">

    </div>
</div>

@code {

    public List<BotConfig> BotConfigs { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BotConfigs = GetConfigs(State.Db);
        State.SelectedGuild = BotConfigs.First().RelatedGuild.Name;
        State.SelectedConfig = BotConfig.Configs.First().Key;
        State.GuildItem = BotConfigs.First().RelatedGuild;
        State.ConfigItem = BotConfigs.First();
    }


    public List<BotConfig> GetConfigs(AppDBContext context)
    {
        return context.Configs
            .Include(x => x.RelatedLogger)
            .Include(x => x.RelatedGuild)
            .Include(x => x.RoleConfigs)
            .ThenInclude(x => x.RelatedGuild)
            .Include(x => x.RoleConfigs)
            .ThenInclude(x => x.RelatedEmoji)
            .Include(x => x.RoleConfigs)
            .ThenInclude(x => x.RelatedRole)
            .Include(x => x.RoleConfigs)
            .ThenInclude(x => x.RelatedMessage)
            .Where(x => x.RelatedBot.Name == State.SelectedBot!.Name)
            .ToList();
    }

    private void SelectGuild(BotConfig config)
    {
        State.SelectedGuild = config.RelatedGuild.Name;
        State.GuildItem = config.RelatedGuild;
        State.ConfigItem = config;
    }

    private void SelectConfig(string config)
    {
        State.SelectedConfig = config;
    }

}