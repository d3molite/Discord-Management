// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("DB.Models.Base.Emoji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmojiString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Emojis");
                });

            modelBuilder.Entity("DB.Models.Base.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("DB.Models.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActiveInDebug")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActiveInRelease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Presence")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.AntiSpamConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IgnorePrefixes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MutedRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MutedRoleId");

                    b.ToTable("AntiSpamConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FaqConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FaqConfig");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FeedbackConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReactionsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TargetChannelId");

                    b.ToTable("FeedbackConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.LoggingConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogMessageDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserJoined")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoggingChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LoggingChannelId");

                    b.ToTable("LoggingConfig");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.MessageReactionConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MessageReactionConfig");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.MessageReactionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EmojiOnly")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MessageReactionConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReactionChance")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReactionEmojiId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReactionMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReactionTrigger")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageReactionConfigId");

                    b.HasIndex("ReactionEmojiId");

                    b.ToTable("MessageReactionItem");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ModnoteConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinimumHierarchy")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ModnoteConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ReactionRoleConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuildConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuildConfigId");

                    b.HasIndex("MessageId");

                    b.ToTable("ReactionRoleConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ReactionRoleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmojiId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReactionRoleConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmojiId");

                    b.HasIndex("ReactionRoleConfigId");

                    b.HasIndex("RoleId");

                    b.ToTable("ReactionRoleItem");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.VoiceConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RestrictedChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestrictedChannelId");

                    b.ToTable("VoiceConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.GuildConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AntiSpamConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BotId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FaqConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FeedbackConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ImageManipulationEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedGuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoggingConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MessageReactionConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModnoteConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VoiceConfigId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AntiSpamConfigId");

                    b.HasIndex("BotId");

                    b.HasIndex("FaqConfigId");

                    b.HasIndex("FeedbackConfigId");

                    b.HasIndex("LinkedGuildId");

                    b.HasIndex("LoggingConfigId");

                    b.HasIndex("MessageReactionConfigId");

                    b.HasIndex("ModnoteConfigId");

                    b.HasIndex("VoiceConfigId");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("DB.Models.FaqItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FaqConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Triggers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FaqConfigId");

                    b.ToTable("FaqItem");
                });

            modelBuilder.Entity("DB.Models.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("DB.Models.GuildChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedGuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LinkedGuildId");

                    b.ToTable("GuildChannel");
                });

            modelBuilder.Entity("DB.Models.GuildRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuildRole");
                });

            modelBuilder.Entity("DB.Models.Objects.Modnote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateLogged")
                        .HasColumnType("TEXT");

                    b.Property<int>("GuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("Modnotes");
                });

            modelBuilder.Entity("DB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.AntiSpamConfig", b =>
                {
                    b.HasOne("DB.Models.GuildRole", "MutedRole")
                        .WithMany()
                        .HasForeignKey("MutedRoleId");

                    b.Navigation("MutedRole");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FeedbackConfig", b =>
                {
                    b.HasOne("DB.Models.GuildChannel", "TargetChannel")
                        .WithMany()
                        .HasForeignKey("TargetChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetChannel");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.LoggingConfig", b =>
                {
                    b.HasOne("DB.Models.GuildChannel", "LoggingChannel")
                        .WithMany()
                        .HasForeignKey("LoggingChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoggingChannel");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.MessageReactionItem", b =>
                {
                    b.HasOne("DB.Models.Configs.Extensions.MessageReactionConfig", null)
                        .WithMany("MessageReactions")
                        .HasForeignKey("MessageReactionConfigId");

                    b.HasOne("DB.Models.Base.Emoji", "ReactionEmoji")
                        .WithMany()
                        .HasForeignKey("ReactionEmojiId");

                    b.Navigation("ReactionEmoji");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ReactionRoleConfig", b =>
                {
                    b.HasOne("DB.Models.Configs.GuildConfig", null)
                        .WithMany("ReactionRoleConfigs")
                        .HasForeignKey("GuildConfigId");

                    b.HasOne("DB.Models.Base.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ReactionRoleItem", b =>
                {
                    b.HasOne("DB.Models.Base.Emoji", "Emoji")
                        .WithMany()
                        .HasForeignKey("EmojiId");

                    b.HasOne("DB.Models.Configs.Extensions.ReactionRoleConfig", null)
                        .WithMany("ReactionRoleItems")
                        .HasForeignKey("ReactionRoleConfigId");

                    b.HasOne("DB.Models.GuildRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Emoji");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.VoiceConfig", b =>
                {
                    b.HasOne("DB.Models.GuildChannel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.GuildChannel", "RestrictedChannel")
                        .WithMany()
                        .HasForeignKey("RestrictedChannelId");

                    b.Navigation("Category");

                    b.Navigation("RestrictedChannel");
                });

            modelBuilder.Entity("DB.Models.Configs.GuildConfig", b =>
                {
                    b.HasOne("DB.Models.Configs.Extensions.AntiSpamConfig", "AntiSpamConfig")
                        .WithMany()
                        .HasForeignKey("AntiSpamConfigId");

                    b.HasOne("DB.Models.Bot", null)
                        .WithMany("Configs")
                        .HasForeignKey("BotId");

                    b.HasOne("DB.Models.Configs.Extensions.FaqConfig", "FaqConfig")
                        .WithMany()
                        .HasForeignKey("FaqConfigId");

                    b.HasOne("DB.Models.Configs.Extensions.FeedbackConfig", "FeedbackConfig")
                        .WithMany()
                        .HasForeignKey("FeedbackConfigId");

                    b.HasOne("DB.Models.Guild", "LinkedGuild")
                        .WithMany()
                        .HasForeignKey("LinkedGuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Configs.Extensions.LoggingConfig", "LoggingConfig")
                        .WithMany()
                        .HasForeignKey("LoggingConfigId");

                    b.HasOne("DB.Models.Configs.Extensions.MessageReactionConfig", "MessageReactionConfig")
                        .WithMany()
                        .HasForeignKey("MessageReactionConfigId");

                    b.HasOne("DB.Models.Configs.Extensions.ModnoteConfig", "ModnoteConfig")
                        .WithMany()
                        .HasForeignKey("ModnoteConfigId");

                    b.HasOne("DB.Models.Configs.Extensions.VoiceConfig", "VoiceConfig")
                        .WithMany()
                        .HasForeignKey("VoiceConfigId");

                    b.Navigation("AntiSpamConfig");

                    b.Navigation("FaqConfig");

                    b.Navigation("FeedbackConfig");

                    b.Navigation("LinkedGuild");

                    b.Navigation("LoggingConfig");

                    b.Navigation("MessageReactionConfig");

                    b.Navigation("ModnoteConfig");

                    b.Navigation("VoiceConfig");
                });

            modelBuilder.Entity("DB.Models.FaqItem", b =>
                {
                    b.HasOne("DB.Models.Configs.Extensions.FaqConfig", null)
                        .WithMany("FaqItems")
                        .HasForeignKey("FaqConfigId");
                });

            modelBuilder.Entity("DB.Models.GuildChannel", b =>
                {
                    b.HasOne("DB.Models.Guild", "LinkedGuild")
                        .WithMany()
                        .HasForeignKey("LinkedGuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedGuild");
                });

            modelBuilder.Entity("DB.Models.Objects.Modnote", b =>
                {
                    b.HasOne("DB.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB.Models.Bot", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FaqConfig", b =>
                {
                    b.Navigation("FaqItems");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.MessageReactionConfig", b =>
                {
                    b.Navigation("MessageReactions");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.ReactionRoleConfig", b =>
                {
                    b.Navigation("ReactionRoleItems");
                });

            modelBuilder.Entity("DB.Models.Configs.GuildConfig", b =>
                {
                    b.Navigation("ReactionRoleConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
