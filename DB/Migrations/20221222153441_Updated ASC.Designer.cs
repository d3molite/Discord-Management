// <auto-generated />
using System;
using DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20221222153441_Updated ASC")]
    partial class UpdatedASC
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("DB.Models.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActiveInDebug")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActiveInRelease")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Presence")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.AntiSpamConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IgnorePrefixes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MutedRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MutedRoleId");

                    b.ToTable("AntiSpamConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FaqConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FaqConfig");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FeedbackConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReactionsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TargetChannelId");

                    b.ToTable("FeedbackConfigs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.LoggingConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogMessageDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserBanned")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserJoined")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LogUserLeft")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoggingChannelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LoggingChannelId");

                    b.ToTable("LoggingConfig");
                });

            modelBuilder.Entity("DB.Models.Configs.GuildConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AntiSpamConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BotId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FaqConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FeedbackConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedGuildId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LoggingConfigId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AntiSpamConfigId");

                    b.HasIndex("BotId");

                    b.HasIndex("FaqConfigId");

                    b.HasIndex("FeedbackConfigId");

                    b.HasIndex("LinkedGuildId");

                    b.HasIndex("LoggingConfigId");

                    b.ToTable("GuildConfigs");
                });

            modelBuilder.Entity("DB.Models.FaqItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FaqConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Triggers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FaqConfigId");

                    b.ToTable("FaqItem");
                });

            modelBuilder.Entity("DB.Models.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Guild");
                });

            modelBuilder.Entity("DB.Models.GuildChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChannelType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkedGuildId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LinkedGuildId");

                    b.ToTable("GuildChannel");
                });

            modelBuilder.Entity("DB.Models.GuildRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("Snowflake")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("GuildRole");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.AntiSpamConfig", b =>
                {
                    b.HasOne("DB.Models.GuildRole", "MutedRole")
                        .WithMany()
                        .HasForeignKey("MutedRoleId");

                    b.Navigation("MutedRole");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FeedbackConfig", b =>
                {
                    b.HasOne("DB.Models.GuildChannel", "TargetChannel")
                        .WithMany()
                        .HasForeignKey("TargetChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetChannel");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.LoggingConfig", b =>
                {
                    b.HasOne("DB.Models.GuildChannel", "LoggingChannel")
                        .WithMany()
                        .HasForeignKey("LoggingChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoggingChannel");
                });

            modelBuilder.Entity("DB.Models.Configs.GuildConfig", b =>
                {
                    b.HasOne("DB.Models.Configs.Extensions.AntiSpamConfig", "AntiSpamConfig")
                        .WithMany()
                        .HasForeignKey("AntiSpamConfigId");

                    b.HasOne("DB.Models.Bot", null)
                        .WithMany("Configs")
                        .HasForeignKey("BotId");

                    b.HasOne("DB.Models.Configs.Extensions.FaqConfig", "FaqConfig")
                        .WithMany()
                        .HasForeignKey("FaqConfigId");

                    b.HasOne("DB.Models.Configs.Extensions.FeedbackConfig", "FeedbackConfig")
                        .WithMany()
                        .HasForeignKey("FeedbackConfigId");

                    b.HasOne("DB.Models.Guild", "LinkedGuild")
                        .WithMany()
                        .HasForeignKey("LinkedGuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB.Models.Configs.Extensions.LoggingConfig", "LoggingConfig")
                        .WithMany()
                        .HasForeignKey("LoggingConfigId");

                    b.Navigation("AntiSpamConfig");

                    b.Navigation("FaqConfig");

                    b.Navigation("FeedbackConfig");

                    b.Navigation("LinkedGuild");

                    b.Navigation("LoggingConfig");
                });

            modelBuilder.Entity("DB.Models.FaqItem", b =>
                {
                    b.HasOne("DB.Models.Configs.Extensions.FaqConfig", null)
                        .WithMany("FaqItems")
                        .HasForeignKey("FaqConfigId");
                });

            modelBuilder.Entity("DB.Models.GuildChannel", b =>
                {
                    b.HasOne("DB.Models.Guild", "LinkedGuild")
                        .WithMany()
                        .HasForeignKey("LinkedGuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedGuild");
                });

            modelBuilder.Entity("DB.Models.Bot", b =>
                {
                    b.Navigation("Configs");
                });

            modelBuilder.Entity("DB.Models.Configs.Extensions.FaqConfig", b =>
                {
                    b.Navigation("FaqItems");
                });
#pragma warning restore 612, 618
        }
    }
}
